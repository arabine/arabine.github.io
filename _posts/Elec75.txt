(((Magazine : PC Team 75)))
(((Rubrique : Team Pratik)))
(((Sous Rubrique : électronique)))

(((titre))) TeamBot (3) – L'environnement de développement pour PIC16F84

(((chapo)))
Ce mois-ci, nous allons boucler notre chaîne de développement en installant un compilateur C et son simulateur. Nous terminerons par la programmation d'un exemple simple pour se familiariser avec nos nouveaux outils de travail.

(((texte)))
Durant quelques numéros, nous mettrons en œuvre un microcontrôleur, le célèbre 16F84 de la famille des PIC de Microchip. Ce composant est extrêmement populaire et, partant, les outils et autes montages l'utilisant sont légions. Nous utiliserons une des dernières version de ce composant, le 16F84A qui autorise une fréquence d'horloge jusqu'à 20MHz, soit une puissance de 5MIPS. Les caractéristiques de ce processeur sont alléchantes : seulement 35 instructions assembleur, architecture RISC (instructions en un seul cycle), 1024 mots de programme dans de la mémoire FLASH, 68 octets de RAM et 64 octets d'EEPROM pour sauvegarder des données. Côté périphériques, nous avons à notre disposition un timer 8-bit, 13 entrées/sorties bidirectionnelles, un watchdog… le tout dans un petit boitier 18 broches ! Le datasheet sur le CD fournira bien d'autres précisions et sera notre manuel de référence durant notre développement. Les premières pages à regarder sont les plans mémoires et la structure interne du PIC. Les schémas ci-contre montrent deux zones mémoires distincts. La première est dédiée à l'enregistrement du programme, les 1024 mots en mémoire FLASH. La deuxième zone contient le SFR (Special Fonction Register) pour paramétrer les périphériques et la RAM pour stocker les variables. Un conseil, imprimez toutes les pages descriptives sur le SFR.

(((inter))) Installation et paramétrage
Tout d'abord, il faut se munir de deux logiciels. D'une part, l'environnement et l'assembleur totalement gratuit de Microchip, à savoir MPLAB. Celui-ci est téléchargeable sur le site du constructeur (www.microchip.com) et bien sûr disponible su le CD Pro. A cela, vient s'ajouter le compilateur C de Hi-Tech Software (www.htsoft.com), lui aussi également gratuit pour un usage personnel et non commercial. Vous le trouverez sur le site du constructeur et encore une fois également sur le CD Pro, toujours présent pour vous éviter des téléchargements. Installer proprement ces deux logiciels dans deux répertoires distincts, en évitant d'utiliser des noms de répertoire du plus de 8 lettres pour garder la compatibilité entre les logiciels. Redémarrer l'ordinateur, puis lancer MPLAB pour le configurer en suivant scrupuleusement les étapes suivantes. En premier lieu, aller dans le menu "Project" puis "Install Language Tool…", et choisir l'outil HI-TECH PICL. Pour le compilateur et le linker, spécifier le chemin de picl.exe, et pour l'assembleur choisir aspic.exe. Aller ensuite dans le menu "Project" et cliquer sur "New Project". Remplir les champs "Target Filename" et "Include Path" par les éléments qui conviennent, par exemple : "pcteam.hex" et " c:\piclite\include". Vérifier que la cible visée est bien le processeur 16F84A, cliquer sur "Node Properties" et mettre le champs à "PIC-C Lite Linker". Enfin, la dernière étape consiste à ajouter un nouveau nœud, le fichier source de votre projet, soit "pcteam.c" dans notre exemple. N'oubliez pas de spécifier dans "Node Properties" qu'il faut faire appel au compilateur. Voilà votre environnement complètement configuré, libre à vous de séparer votre projets en plusieurs sources, en mixant le code C et assembleur par exemple. Dernière chose, ne pas oublier de spécifier le mode de développement en "MPLAB SIM 16F84A" afin de bénéficier du très pratique outil de simulation !

(((inter))) Schéma et tests
Il est courant dans le monde des microcontrôleurs de commencer par un montage simple, à l'instar du fameux "Hello world !". La coutume veut que l'on fasse clignoter une LED branchée sur un port. Cela nous permettra de faire le tour de toute la chaîne de développement. Commençons par monter le schéma électrique présenté ci-contre. Le 16F84 a besoin d'un minimum de composants pour pouvoir fonctionner. Le quartz, accompagné de ses condensateurs, fournit l'horloge de cadencement. Il y a l'inévitable alimentation de +5V issue d'un régulateur de type 7805 par exemple. Enfin, la broche de remise à zéro (MCLR) est mise au 5V pour éviter de relancer le programme. Bien sûr, la LED n'est utile ici que pour notre application. Une fois le schéma terminé, lancer MPLAB et, après avoir suivi la configuration précédente, recopier le code source suivant dans un fichier source avec l'extension .c.

(((listing)))
#define EVER ;;
#include <pic1684.h>
unsigned char Compteur;

void main(void){
  Compteur = 0;    
  TRISB=0xFE;
  RB0 = 0;
  OPTION = 0x7;
  INTCON = 0x20;
  TMR0 = 0;  
  GIE=1;
  for(EVER){
  }
}

void interrupt Timer_Overflow(void){
  char i;    
  if(T0IF){
    T0IF=0;
    Compteur++;
    if(Compteur==38){
    Compteur = 0;
    i = RB0;
    RB0 = ~i;
    TMR0 = 0;
    }
  }
}

(((texte)))
Ne vous inquiétez pas si vous ne comprenez pas tout, nous aurons le temps de voir certaines parties plus en détails durant les prochains mois. Ce même code source existe en version commentée sur le CD. Le programme est constituée de deux fonctions, une principale (main) et la deuxième (Timer_Overflow) invoquée lors d'une interruption interne. La fonction principale contient une boucle infinie, qui se charge de faire changer l'état de la LED toutes les 0,5 secondes. En fait, nous avons créé une fonction "perte de temps" similaire au Delay() existante en C sur PC. Une fois le code source recopié, appuyer sur F10 pour invoquer le compilateur, puis le linker. Si tout c'est bien passé, ce dernier a du générer un fichier hexadécimal au format Intel portant l'extension .hex. C'est en quelque sorte "l'exécutable" que nous allons placer dans la mémoire FLASH du 16F84.

(((inter))) Programmation du PIC
Voici la dernière étape. Placer le 16F84 sur le programmateur que nous avons réalisé le mois dernier. Ensuite; installer le logiciel IcProg disponible sur le CD Pro. Configurer les divers paramètres : le programmateur se nomme JDM, choisissez le bon port série (COM1 ou COM2 généralement) et le bon composant (16F84A). La capture d'écran ci-contre montre les autres paramètres à régler. Ouvrir le fichier hexadécimal généré par MPLAB puis lancer la programmation et la vérification. Lorsque tout est fini et est validé, ôter le composant du programmateur pour le placer sur le circuit de test. Alimenter le montage et la LED devrait clignoter au rythme très précis de la seconde. Bravo, vous avez réalisé votre premier développement sur PIC16F84 !

(((inter))) Le mois prochain
Il reste encore beaucoup à dire sur MPLAB et le 16F84. Il existe quelques ouvrages de références dans le commerce mais Internet vous fournira encore plus de renseignements et qui plus est, gratuitement. N'oubliez pas de consulter le CD Pro qui contient tous les fichiers liés à cet article. Au cours du prochain numéro, nous appliquerons nos connaissances en concevant une carte de commande pour moteur à courant continu. Et en prime, vous trouverez les premières photos de TeamBot.

(((signature)))
Anthony Rabine - arabine@programmationworld.com

(((images)))
elec1.tif : Le plan mémoire de la partie programme.
elec2.tif : Le plan mémoire du SFR et de la RAM.
elec3.tif : MPLAB est un fabuleux outil de développement.
elec4.tif : Nous voyons que le code est bon grâce à la simulation temps réel.
elec5.tif : Ce PIC-atchu ne lancera que des éclairs inoffensifs !
elec6.tif : Et encore une programmation parfaitement réussie.
